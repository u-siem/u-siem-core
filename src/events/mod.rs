use serde::Serialize;
use std::borrow::Cow;
use std::collections::{BTreeMap, BTreeSet};
pub mod field;

#[derive(Serialize, Debug)]
#[serde(tag = "type")]
pub enum SiemEvent {
    Firewall,
    Intrusion,
    WebProxy,
    /// Adaptative Distribution Content are Servers or LoadBalancers for HTTP traffic.
    /// 
    /// 
    /// Ex: Apache, Nginx, Tomact or IIS.
    ADC,
    /// Like an antivirus, a Sandbox retrieves information about a file being malicious or not. Can be used
    /// to extract filenames, hashes or other relevant information to update a dataset of known hashes and
    /// trigger queries.
    /// 
    ///  Ex: Wildfire, Mcafee ATD, Cuckoo...
    Sandbox,
    Antivirus,
    /// Data Loss Prevention are devices that detect anomalous behavour related to
    /// data exfiltration. 
    /// 
    /// Ex: CloudSOC
    DLP,
    /// Endpoint Detection and Response devices, also EPP.
    EDR,
    /// Mail events, as the name suggest are events generated by an email gateway. Can
    /// contain threat related information if an anomaly was detected.
    /// Ex: Microsoft Exchange, IronPort, Office 365...
    Mail,
    /// DNS requests events. To better correlate this type of events, be carefull of checking if it contains a dns_server
    /// tag, because that means that the originator of the request is a Recursive DNS and not an endpoint. It normally 
    /// happens if the one generating the log was a firewall (Ex: Palo Alto) and not a DNS server, or if multiple DNS are 
    /// used in the organization, like a DNS talking to another DNS.
    DNS,
    /// Logs related to authentication, like a user trying to log in to a Router,
    /// a server or any kind of system.
    /// 
    /// Ex: RDP, Windows, Linux, Mailbox login...
    Auth,
    /// Local events related to servers or workstations, like OS failed to update, 
    /// antivirus outdated, log file cleaned, user or group changes (Including global or universal domain events)
    Endpoint,
    // Unknown info that must be extracted and added to event fields. JSON format, like Windows events
    Json(serde_json::Value),
    // Unknown info that must be extracted and added to event fields.
    Unknown,
}

/// This is a simple log event. It contains information about the asset that generated
/// this log, the client if we are working in a multi-client environments aka SOC,
/// some fields to facilitate correlation with SIGMA rules, timestamps and tags to
/// better describe the content inside.
#[derive(Serialize, Debug)]
pub struct SiemLog {
    origin: Cow<'static, str>,
    tenant: Cow<'static, str>,   //Contoso
    product: Cow<'static, str>,  //ASA
    service: Cow<'static, str>,  //VPN
    category: Cow<'static, str>, //Firewall
    vendor: Cow<'static, str>,   //Cisco
    event: SiemEvent,
    /// Tags to better describe the event.Must be in lowercase. Ex: vip_user, critical_asset, fake_account, honeypot
    tags: BTreeSet<Cow<'static, str>>,
    /// Map of fields extracted or generated for this log. Must follow the Elastic Common Schema (ECS v1.x)
    fields: BTreeMap<Cow<'static, str>, field::SiemField>,
    /// Original log message including syslog header
    message: String,
    /// Timestamp at witch the log arrived  
    event_received: i64,
    /// Timestamp at witch the log was generated. The clocks at origin must be correctly configured.
    event_created: i64,
}
//TODO: add methods to retrieve or set fields.